ANS:1---
Vertical Order traversal of Binary Tree..........
public class Solution {
    public int[][] verticalOrderTraversal(TreeNode A) {
           if (A == null) {
            return new int[0][0];
    }
     Map<Integer, List<Integer>> verticalOrderMap = new HashMap<>();

       
        Queue<TreeNode> queue = new LinkedList<>();
        Queue<Integer> verticalDistances = new LinkedList<>();

        queue.add(A);
        verticalDistances.add(0);

        while (!queue.isEmpty()) {
            TreeNode current = queue.poll();
            int verticalDistance = verticalDistances.poll();

          
            verticalOrderMap.computeIfAbsent(verticalDistance, k -> new ArrayList<>()).add(current.val);

          
            if (current.left != null) {
                queue.add(current.left);
                verticalDistances.add(verticalDistance - 1);
            }


            if (current.right != null) {
                queue.add(current.right);
                verticalDistances.add(verticalDistance + 1);
            }
        }

        
        int distinctVerticalDistances = verticalOrderMap.size();

 
        int[][] result = new int[distinctVerticalDistances][];

      
        int index = 0;
        for (int verticalDistance : verticalOrderMap.keySet()) {
            List<Integer> nodesAtVerticalDistance = verticalOrderMap.get(verticalDistance);
            result[index] = new int[nodesAtVerticalDistance.size()];

          
            for (int i = 0; i < nodesAtVerticalDistance.size(); i++) {
                result[index][i] = nodesAtVerticalDistance.get(i);
            }

            index++;
        }
        return result;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:2-- RIGHT SIDE VIEW OF TREE--------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
     public int height(TreeNode root) {
        if (root == null)
            return 0;
        else {
            int lheight = height(root.left);
            int rheight = height(root.right);
            if (lheight > rheight)
                return lheight + 1;
            else
                return rheight + 1;
        }
    }
     public List<Integer> FindCurrentLevel(TreeNode root , int level) {
        List<Integer> list = new ArrayList<>();
        if (root == null)
            return list;
        if (level == 1) {
            list.add(root.val);
        } else if (level > 1) {
            list.addAll(FindCurrentLevel(root.left, level - 1));
            list.addAll(FindCurrentLevel(root.right, level - 1));
        }
        return list;
    }
      public List<Integer> LevelOrder(TreeNode root) {
        List<Integer> liss = new ArrayList<>();
        int h = height(root);
        for (int i = 1; i <= h; i++) {
            List<Integer> lis = FindCurrentLevel(root, i);
            if (!lis.isEmpty()) {
                int ans = lis.get(lis.size() - 1);
                liss.add(ans);
            }
        }
        return liss;
    }
    public List<Integer> rightSideView(TreeNode root) {
         return LevelOrder(root);
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:3--

 Construct Binary Tree from Preorder and Inorder Traversal

class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
         return buildTreeHelper(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1);
    }

    private TreeNode buildTreeHelper(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd) {
        if (preStart > preEnd || inStart > inEnd) {
            return null;
        }

        // The first element in preorder is the root of the current subtree
        int rootValue = preorder[preStart];
        TreeNode root = new TreeNode(rootValue);

        // Find the index of the root in inorder to determine the left and right subtrees
        int rootIndexInorder = findRootIndexInorder(inorder, inStart, inEnd, rootValue);

        // Recursively build left and right subtrees
        root.left = buildTreeHelper(preorder, preStart + 1, preStart + rootIndexInorder - inStart,
                                    inorder, inStart, rootIndexInorder - 1);
        root.right = buildTreeHelper(preorder, preStart + rootIndexInorder - inStart + 1, preEnd,
                                     inorder, rootIndexInorder + 1, inEnd);

        return root;
    }

    private int findRootIndexInorder(int[] inorder, int inStart, int inEnd, int rootValue) {
        for (int i = inStart; i <= inEnd; i++) {
            if (inorder[i] == rootValue) {
                return i;
            }
        }
        return -1; // This case should not occur if the input is valid
    }

    // Helper method to print the inorder traversal of a binary tree
    private void inorderTraversal(TreeNode root) {
        if (root != null) {
            inorderTraversal(root.left);
            System.out.print(root.val + " ");
            inorderTraversal(root.right);
        }
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:4--
class Solution {
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return buildTreeHelper(inorder, 0, inorder.length - 1, postorder, 0, postorder.length - 1);
    }

    private TreeNode buildTreeHelper(int[] inorder, int inStart, int inEnd, int[] postorder, int postStart, int postEnd) {
        if (inStart > inEnd || postStart > postEnd) {
            return null;
        }

        // The last element in postorder is the root of the current subtree
        int rootValue = postorder[postEnd];
        TreeNode root = new TreeNode(rootValue);

        // Find the index of the root in inorder to determine the left and right subtrees
        int rootIndexInorder = findRootIndexInorder(inorder, inStart, inEnd, rootValue);

        // Calculate the size of the right subtree
        int rightSubtreeSize = inEnd - rootIndexInorder;

        // Recursively build left and right subtrees
        root.left = buildTreeHelper(inorder, inStart, rootIndexInorder - 1,
                                    postorder, postStart, postEnd - rightSubtreeSize - 1);
        root.right = buildTreeHelper(inorder, rootIndexInorder + 1, inEnd,
                                     postorder, postEnd - rightSubtreeSize, postEnd - 1);

        return root;
    }

    private int findRootIndexInorder(int[] inorder, int inStart, int inEnd, int rootValue) {
        for (int i = inStart; i <= inEnd; i++) {
            if (inorder[i] == rootValue) {
                return i;
            }
        }
        return -1; // This case should not occur if the input is valid
    }

    // Helper method to print the inorder traversal of a binary tree
    private void inorderTraversal(TreeNode root) {
        if (root != null) {
            inorderTraversal(root.left);
            System.out.print(root.val + " ");
            inorderTraversal(root.right);
        }
    }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
